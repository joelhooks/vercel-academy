# University Project Summary for LLM Migration

## Project Overview
This is a summary of the "university" project structure and key components designed specifically for LLM consumption to aid in migration to a new project using Drizzle ORM instead of Payload CMS.

## Key Migration Notes:
1. IMPORTANT: Payload CMS will NOT be used in the new project
2. Data will be loaded via Drizzle ORM instead
3. Main migration touchpoints: data layer and frontend components
4. Localization system must be preserved

## Project Architecture
The project follows a Next.js App Router architecture with:
- Payload CMS integration (to be replaced with Drizzle)
- i18n routing through the [lang] parameter and middleware
- University learning platform features

## Data Layer (To be migrated to Drizzle ORM)
The data layer consists of server components that currently fetch from Payload CMS:
- brands.ts: 48 lines
- categories.ts: 28 lines
- certificates.ts: 110 lines
- lessons.ts: 251 lines
- modules.ts: 145 lines
- progress.ts: 363 lines
- sections.ts: 168 lines
- students.ts: 55 lines
- users.ts: 16 lines

These files will need to be replaced with Drizzle ORM implementations.

## Localization System

The project uses a custom internationalization setup with:
1. Middleware (src/middleware.ts) to handle locale routing
2. Locale configuration in src/config/locales.ts
3. [lang] parameter in routes
4. Default locale: 'en', supported locales include 'ja'

## Key File Summaries

### src/middleware.ts (1.64 KB, 52 lines)

```
import { NextResponse } from 'next/server'
import { locales, defaultLocale } from '@/config/locales'

import type { NextRequest } from 'next/server'

// Paths that should be excluded from locale handling
const EXCLUDED_PATHS = /^(\/api\/|\/_next\/|\/favicon\.ico|.*\.(jpg|png|gif|svg|ico|css|js|json)$)/

export function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname

  // Skip processing for excluded paths
  if (EXCLUDED_PATHS.test(pathname)) {
    return NextResponse.next()
  }

  // Bypass locale handling for admin routes
  if (pathname.startsWith('/admin')) {
    return NextResponse.next();
  }

  // Case 1: /en/* routes - redirect to /* (root paths)
  if (pathname.startsWith(`/${defaultLocale}/`)) {
    const newUrl = new URL(request.url)
    // Remove the /en/ prefix and clean up the path
    newUrl.pathname = pathname.replace(`/${defaultLocale}/`, '/').replace('//', '/')
    if (newUrl.pathname === '') newUrl.pathname = '/'
    return NextResponse.redirect(newUrl, 308) // 308 is Permanent Redirect
  }

  // Case 2: /* routes (not starting with any locale) - rewrite to /en/*
  const startsWithLocale = locales.some(
    (locale) => pathname === `/${locale}` || pathname.startsWith(`/${locale}/`),
  )

  if (!startsWithLocale) {
    const newUrl = new URL(request.url)
    newUrl.pathname = pathname === '/' ? `/${defaultLocale}` : `/${defaultLocale}${pathname}`
    return NextResponse.rewrite(newUrl)
  }

  // Case 3: Other locale routes (/ja/*, etc.) - pass through
  return NextResponse.next()
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.).*)',
    '/admin/:path*',
  ],
}

```

### src/config/locales.ts (0.46 KB, 27 lines)

```
export interface Locale {
  label: string
  code: string
}

export interface LocaleConfig {
  locales: Locale[]
  defaultLocale: string
}

export const localeConfig: LocaleConfig = {
  locales: [
    {
      label: 'English',
      code: 'en',
    },
    {
      label: 'Japanese',
      code: 'ja',
    },
  ],
  defaultLocale: 'en',
} as const

export const locales = localeConfig.locales.map((locale) => locale.code)
export const defaultLocale = localeConfig.defaultLocale

```

### src/lib/data/modules.ts (3.56 KB, 145 lines)

```
'use server'

/**
 * How to Use:
 *
 * Default behavior (auto draft detection, English fallback)
 * const modules = await getModules()
 *
 * Static with a specific locale
 * const japaneseModules = await getModules(false, 'ja')
 */

import { getPayload } from 'payload'
import { cache } from 'react'
import { draftMode } from 'next/headers'
import configPromise from '@payload-config'
import type { Module, Config } from '@/payload-types'

const getPayloadInstance = cache(async () => {
  return await getPayload({ config: configPromise })
})

const getDraftStatus = cache(async (): Promise<boolean> => {
  try {
    const { isEnabled } = await draftMode()
    return isEnabled
  } catch {
    // If draftMode() fails, we're not in a request context
    return false
  }
})

/**
 * Get all modules with optional draft mode control
 * Set forceDraft=false for static generation contexts
 */
export const getModules = cache(
  async (forceDraft?: boolean, locale?: Config['locale']): Promise<Module[]> => {
    try {
      // Use forceDraft if provided, otherwise check draftMode
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      const result = await payload.find({
        collection: 'modules',
        draft,
        sort: '-createdAt',
        depth: 2,
        locale: locale,
        fallbackLocale: 'en',
        limit: 100,
      })

      return result.docs || []
    } catch (error) {
      console.error('Error fetching modules:', error)
      return []
    }
  },
)

/**
 * Get a module by slug with draft mode support
 */
export const getModuleBySlug = cache(
  async (slug: string, forceDraft?: boolean, locale?: Config['locale']): Promise<Module | null> => {
    if (!slug) return null

    try {
      // Use forceDraft if provided, otherwise check draftMode
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      console.log('Debug - Fetching module by slug:', slug, 'with draft:', draft)

      const result = await payload.find({
        collection: 'modules',
        draft,
        where: {
          slug: {
            equals: slug,
          },
        },
        depth: 2,
        limit: 1,
        locale: locale,
        fallbackLocale: 'en',
      })

      console.log('Debug - Module query result:', {
        total: result.totalDocs,
        docs: result.docs,
        query: {
          collection: 'modules',
          where: {
            slug: {
              equals: slug,
            },
          },
          draft,
        },
      })

      const mod = result.docs?.[0] || null
      return mod
    } catch (error) {
      console.error(`Error fetching module by slug "${slug}":`, error)
      return null
    }
  },
)

/**
 * Get a module by ID with draft mode support
 */
export const getModuleById = cache(
  async (
    id: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Module | null> => {
    if (!id) return null

    try {
      // Use forceDraft if provided, otherwise check draftMode
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      const mod = await payload.findByID({
        collection: 'modules',
        draft,
        id: String(id), // Ensure ID is a string
        depth: 2,
        locale: locale,
        fallbackLocale: 'en',
      })

      return mod || null
    } catch (error) {
      console.error(`Error fetching module by ID "${id}":`, error)
      return null
    }
  },
)

```

### src/lib/data/lessons.ts (6.13 KB, 251 lines)

```
'use server'

/**
 * How to Use:
 *
 * Default behavior (auto draft detection, English fallback)
 * const lessons = await getLessonsBySectionId(sectionId)
 *
 * Static with a specific locale
 * const japaneseLessons = await getLessonsBySectionId(sectionId, false, 'ja')
 */

import { getPayload } from 'payload'
import { cache } from 'react'
import { draftMode } from 'next/headers'
import configPromise from '@payload-config'
import type { Lesson, Config } from '@/payload-types'

const getPayloadInstance = cache(async () => {
  return await getPayload({ config: configPromise })
})

const getDraftStatus = cache(async (): Promise<boolean> => {
  try {
    const { isEnabled } = await draftMode()
    return isEnabled
  } catch {
    // If draftMode() fails, we're not in a request context
    return false
  }
})

/**
 * Get lessons by section ID with optional draft and locale support
 */
export const getLessonsBySectionId = cache(
  async (
    sectionId: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Lesson[]> => {
    if (!sectionId) return []

    try {
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      // First, get the section with its lessons array
      const section = await payload.findByID({
        collection: 'sections',
        id: String(sectionId),
        depth: 2, // Increase depth to get full lesson objects
        draft,
        locale,
      })

      if (!section?.lessons?.length) return []

      // The lessons are already full objects in the array
      const lessons = section.lessons
        .map((item: any) => item.lesson)
        .filter((lesson: any) => lesson && typeof lesson === 'object')

      // Sort lessons by order if available
      return lessons.sort((a: any, b: any) => {
        if (a.order === undefined || b.order === undefined) return 0
        return a.order - b.order
      })
    } catch (error) {
      console.error(`Error fetching lessons by section ID "${sectionId}":`, error)
      return []
    }
  },
)

/**
 * Get a lesson by slug and section ID with draft mode support
 */
export const getLessonBySlugAndSectionId = cache(
  async (
    slug: string,
    sectionId?: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Lesson | null> => {
    if (!slug) return null

    try {
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      const where: any = {
        slug: {
          equals: slug,
        },
      }

      // Add section filter if sectionId is provided
      if (sectionId) {
        where.section = {
          equals: sectionId,
        }
      }

      const result = await payload.find({
        collection: 'lessons',
        draft,
        where,
        depth: 1,
        limit: 1,
        locale: locale,
        fallbackLocale: 'en',
      })

      const lesson = result.docs?.[0] || null
      return lesson
    } catch (error) {
      console.error(`Error fetching lesson by slug "${slug}" and section ID "${sectionId}":`, error)
      return null
    }
  },
)

/**
 * Get a lesson by ID with draft mode support
 */
export const getLessonById = cache(
  async (
    id: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Lesson | null> => {
    if (!id) return null

    try {
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      const result = await payload.findByID({
        collection: 'lessons',
        draft,
        id: String(id),
        depth: 1,
        locale: locale,
        fallbackLocale: 'en',
      })

      return result || null
    } catch (error) {
      console.error(`Error fetching lesson by ID "${id}":`, error)
      return null
    }
  },
)

/**
 * Get lessons by module ID with optional draft and locale support
 */
export const getLessonsByModuleId = cache(
  async (
    moduleId: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Lesson[]> => {
    if (!moduleId) return []

    try {
      const draft = true // Always include drafts for now since we're in development
      const payload = await getPayloadInstance()

      // Debug - First try to find the lesson directly by slug
      const debugLessonQuery = await payload.find({
        collection: 'lessons',
        draft: true,
        where: {
          slug: {
            equals: 'this-lesson',
          },
        },
        depth: 2,
      })

      console.log('Debug - Direct lesson query:', {
        total: debugLessonQuery.totalDocs,
        docs: debugLessonQuery.docs,
        query: {
          collection: 'lessons',
          where: { slug: { equals: 'this-lesson' } },
          draft: true,
        },
      })

      console.log('Debug - Fetching lessons for module:', moduleId, 'with 
... [truncated for brevity] ...
```

### src/lib/data/sections.ts (3.90 KB, 168 lines)

```
'use server'

/**
 * How to Use:
 *
 * Default behavior (auto draft detection, English fallback)
 * const sections = await getSectionsByModuleId(moduleId)
 *
 * Static with a specific locale
 * const japaneseSections = await getSectionsByModuleId(moduleId, false, 'ja')
 */

import { getPayload } from 'payload'
import { cache } from 'react'
import { draftMode } from 'next/headers'
import configPromise from '@payload-config'
import type { Section, Config } from '@/payload-types'

const getPayloadInstance = cache(async () => {
  return await getPayload({ config: configPromise })
})

const getDraftStatus = cache(async (): Promise<boolean> => {
  try {
    const { isEnabled } = await draftMode()
    return isEnabled
  } catch {
    // If draftMode() fails, we're not in a request context
    return false
  }
})

/**
 * Get sections by module ID with optional draft and locale support
 */
export const getSectionsByModuleId = cache(
  async (
    moduleId: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Section[]> => {
    if (!moduleId) return []

    try {
      const draft = true // Always include drafts for now since we're in development
      const payload = await getPayloadInstance()

      console.log('Debug - Fetching sections for module:', moduleId, 'with draft:', draft)

      const result = await payload.find({
        collection: 'sections',
        draft,
        where: {
          module: {
            equals: moduleId,
          },
        },
        sort: 'order',
        depth: 2,
        locale: locale,
        fallbackLocale: 'en',
        limit: 100,
      })

      console.log('Debug - Sections query result:', {
        total: result.totalDocs,
        docs: result.docs,
        query: {
          collection: 'sections',
          where: {
            module: {
              equals: moduleId,
            },
          },
          depth: 2,
          draft,
        },
      })

      const sections = result.docs || []
      return sections
    } catch (error) {
      console.error(`Error fetching sections by module ID "${moduleId}":`, error)
      return []
    }
  },
)

/**
 * Get a section by slug and module ID with draft mode support
 */
export const getSectionBySlugAndModuleId = cache(
  async (
    slug: string,
    moduleId?: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Section | null> => {
    if (!slug) return null

    try {
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      const where: any = {
        slug: {
          equals: slug,
        },
      }

      // Add module filter if moduleId is provided
      if (moduleId) {
        where.module = {
          equals: moduleId,
        }
      }

      const result = await payload.find({
        collection: 'sections',
        draft,
        where,
        depth: 1,
        limit: 1,
        locale: locale,
        fallbackLocale: 'en',
      })

      const section = result.docs?.[0] || null
      return section
    } catch (error) {
      console.error(`Error fetching section by slug "${slug}" and module ID "${moduleId}":`, error)
      return null
    }
  },
)

/**
 * Get a section by ID with draft mode support
 */
export const getSectionById = cache(
  async (
    id: string | number,
    forceDraft?: boolean,
    locale?: Config['locale'],
  ): Promise<Section | null> => {
    if (!id) return null

    try {
      const draft = forceDraft !== undefined ? forceDraft : await getDraftStatus()
      const payload = await getPayloadInstance()

      const result = await payload.findByID({
        collection: 'sections',
        draft,
        id: String(id),
        depth: 1,
        locale: locale,
        fallbackLocale: 'en',
      })

      return result || null
    } catch (error) {
      console.error(`Error fetching section by ID "${id}":`, error)
      return null
    }
  },
)

```

### src/lib/data/progress.ts (9.19 KB, 363 lines)

```
'use server'

import { unstable_noStore } from 'next/cache'
import { getStudent } from '@/lib/data/students'
import { getPayload } from 'payload'

import configPromise from '@payload-config'

import type { Course, Chapter, Progress } from '@/payload-types'

interface PayloadList<T> {
  docs: T[]
  totalDocs: number
  limit: number
  totalPages: number
  page?: number
  pagingCounter?: number
  hasPrevPage?: boolean
  hasNextPage?: boolean
  prevPage?: number | null
  nextPage?: number | null
}

export interface ChapterProgress {
  isComplete: boolean
  progressPercent: number
  numChapters: number
}

export type ChapterProgressData = ChapterProgress | null

export interface LessonProgress {
  isComplete: boolean
  progressPercent: number
  numLessons: number
}

export type LessonProgressData = LessonProgress | null

export interface ModuleProgress {
  isComplete: boolean
  progressPercent: number
  numSections: number
}

export type ModuleProgressData = ModuleProgress | null

const EMPTY_PAYLOAD_LIST: PayloadList<any> = {
  docs: [],
  totalDocs: 0,
  limit: 0,
  totalPages: 0,
}

const DEFAULT_CHAPTER_PROGRESS: ChapterProgress = {
  isComplete: false,
  progressPercent: 0,
  numChapters: 0,
}

const payload = await getPayload({ config: configPromise })

const findChapterById = async (chapterId: number) => {
  return payload.findByID({
    collection: 'chapters',
    id: chapterId,
    depth: 1,
  })
}

const findCourseById = async (courseId: number) => {
  return payload.findByID({
    collection: 'courses',
    id: courseId,
    depth: 1,
  })
}

const findChaptersByCourseId = async (courseId: number) => {
  return payload.find({
    collection: 'chapters',
    where: { course: { equals: courseId } },
  })
}

export const getProgressForChapter = async (chapterId: number): Promise<ChapterProgress> => {
  unstable_noStore()

  const student = await getStudent()
  if (!student) return DEFAULT_CHAPTER_PROGRESS

  const studentId = student?.id
  const chapter = await findChapterById(chapterId)
  if (!chapter) return DEFAULT_CHAPTER_PROGRESS

  const courseId = getCourseFromChapter(chapter as Chapter)
  if (!courseId) return DEFAULT_CHAPTER_PROGRESS

  const [result, allProgress, course] = await Promise.all([
    findProgress(studentId, chapterId),
    findProgress(studentId),
    findCourseById(courseId),
  ])

  if (!course) return DEFAULT_CHAPTER_PROGRESS

  const completedChapters = allProgress.docs.filter(
    (p) => getCourseFromChapter(p.chapter as Chapter) === courseId,
  ).length

  const totalChapters = course.chapters?.length || 0

  return {
    isComplete: result.docs.length > 0,
    progressPercent: totalChapters > 0 ? Math.round((completedChapters / totalChapters) * 100) : 0,
    numChapters: totalChapters,
  }
}

export const getProgressForCourse = async (courseId: number): Promise<Progress[]> => {
  unstable_noStore()

  const student = await getStudent()
  if (!student) return []

  const [courseChapters, progress] = await Promise.all([
    findChaptersByCourseId(courseId),
    findProgress(student.id),
  ])

  const chapterIds = new Set(courseChapters.docs.map((c) => c.id))
  return progress.docs.filter((p) => {
    const chapterId = getChapterId(p.chapter)
    return chapterId ? chapterIds.has(chapterId) : false
  })
}

export const getProgressForCourses = async (): Promise<Progress[]> => {
  unstable_noStore()

  const student = await getStudent()
  if (!student) return []

  const progress = await findProgress(student.id)
  const courseIds = new Set<number>()

  progress.docs.forEach((p) => {
    const courseId = getCourseFromChapter(p.chapter as Chapter)
    if (courseId) courseIds.add(courseId)
  })

  const courses = await fetchCoursesByIds(courseIds)
  return progress.docs.map((p) => {
    const chapter = p.chapter as Chapter
    const courseId = getCourseFromChapter(chapter)
    return {
      ...p,
      chapter: {
        ...chapter,
        course: courseId,
      } as Chapter,
    }
  })
}

export const getInProgressCourses = async (): Promise<Course[]> => {
  unstable_noStore()

  const student = await getStudent()
  if (!student) return []

  const progress = await findProgress(student.id)
  const courseIds = new Set(
    progress.docs
      .map((p) => getCourseFromChapter(p.chapter as Chapter))
      .filter((id): id is number => id !== null),
  )

  return fetchCoursesByIds(courseIds)
}

export const getChapterProgress = async (chapterId: number): Promise<ChapterProgressData> => {
  unstable_noStore()

  const student = await getStudent()
  if (!student) return null

  const chapter = await findChapterById(chapterId)
  if (!chapter) return null

  const courseId = getCourseFromChapter(chapter as Chapter)
  if (!courseId) return null

  const [result, allProgress, course] = await Promise.all([
    findProgress(student.id, chapterId),
    findProgress(student.id),
    findCourseById(courseId),
  ])

  if (!course) return null

  const completedChapters = allProgress.docs.filter
... [truncated for brevity] ...
```

## Frontend Structure (src/app/(frontend))

The frontend uses Next.js App Router with:
- Nested layouts
- [lang] parameter for i18n routes
- (university) and (site) route groups
- learn/[mod]/[lesson] pattern for curriculum navigation

## Data Schema (To be migrated to Drizzle Schema)

Based on the data files, the following entities need to be modeled in Drizzle:

1. Modules - Top-level educational units
2. Sections - Components of modules
3. Lessons - Individual learning units within sections
4. Progress - User progress tracking
5. Certificates - Completion credentials
6. Categories - Content organization
7. Students - User profiles specific to learning
8. Users - Base user accounts
9. Brands - Branding information

## Migration Strategy

1. Create Drizzle schema files for each entity
2. Replace Payload data fetching with Drizzle queries
3. Maintain the same data structure for frontend compatibility
4. Preserve the localization middleware and configuration
5. Update any references to Payload-specific features

